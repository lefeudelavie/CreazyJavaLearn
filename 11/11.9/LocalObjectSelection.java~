import java.awt.datatransfer.*;

public class LocalObjectSelection implements Transferable
{
    private Object object;
    public LocalObjectSelection(Object object)
    {
        this.object = object;
    }

    public DataFlavor[] getTransferDataFlavors()
    {
        DataFlavor[] flavors = new DataFlavor[2];

        Class clazz = object.getClass();
        String mimeType = "application/x-java-jvm-local-objectref;"
            + "class=" + clazz.getName();

        try
        {
            flavors[0] = new DataFlavor(mimeType);
            flavors[1] = DataFlavor.stringFlavor;
            return flavors;
        }
        catch (ClassNotFoundException e)
        {
            e.printStackTrace();
            return null;
        }
    }

    public Object getTransferData(DataFlavor flavor)
        throws UnsupportedFlavorException
    {
        if (!isDataFlavorSupported(flavor))
        {
            throw new UnsupportedFlavorException(flavor);
        }
        if (flavor.equals(DataFlavor.stringFlavor))
        {
            return object.toString();
        }

        return object;

    }

    public boolean isSupportedDataFlavor(DataFlavor flavor)
    {
        return flavor.equals(DataFlavor.stringFlavor) || 
            flavor.getPrimaryType().equals("application")
            && flavor.getSubType().equals("x-java-jvm-local-objectref")
            && flavor.getRepresentationClass().isAssignableFrom(object.getClass());
    }
}
