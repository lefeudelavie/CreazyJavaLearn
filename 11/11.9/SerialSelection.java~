import java.awt.datatransfer.*;
import java.io.*;

public class SerialSelection implements Transferable
{
    Object obj;

    public SerialSelection(Object obj)
    {
        this.obj = obj;    
    }

    public DataFlavor[] getTransferDataFlavor()
    {
        DataFlavor[] flavors = new DataFlavor[2];
        Class clazz = obj.getClass();
        String mimeType = DataFlavor.javaSerializedObjectMimeType +
            ";class=" + clazz.getName();
        try
        {
            flavors[0] = new DataFlavor(mimeType);
            flavors[1] = DataFlavor.stringFlavor;
            return flavors;
        }
        catch (ClassNotFoundException e)
        {
            e.printStackTrace();
            return null;
        }
        
    }

    public Object getTransferData(DataFlavor flavor)
        throws UnsupportedFlavorException
    {
        if (!isDataFlavorSupported(flavor)) 
        {
            throw new UnsupportedFlavorException(flavor);
        }
        if (flavor.equals(DataFlavor.stringFlavor))
        {
            return obj.toString();
        }
        return obj;

    }

    public boolean isDataFlavorSupported(DataFlavor flavor)
    {
        return flavor.equals(DataFlavor.stringFlavor) ||
            flavor.getPrimaryType().equals("application")
            && flavor.getSubType().equals("x-java-serialized-object")
            && flavor.getRepresentationClass().isAssignableFrom(obj.getClass());
    }
}
